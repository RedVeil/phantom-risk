/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PhantomRiskInterface extends ethers.utils.Interface {
  functions: {
    "attack(uint8,uint8,uint256)": FunctionFragment;
    "claimFees()": FunctionFragment;
    "claimPleb(uint8,uint256,address)": FunctionFragment;
    "claimableFees(address)": FunctionFragment;
    "deployGarrison(uint8,uint8,uint256)": FunctionFragment;
    "deployWorker(uint8,uint256)": FunctionFragment;
    "factionAlive(uint256)": FunctionFragment;
    "isNeighbor(uint8,uint8)": FunctionFragment;
    "isNeighbor2(uint8,uint8)": FunctionFragment;
    "joinGame()": FunctionFragment;
    "movementAllowed(uint8,uint8)": FunctionFragment;
    "overwhelming()": FunctionFragment;
    "owner()": FunctionFragment;
    "player(address)": FunctionFragment;
    "pleb()": FunctionFragment;
    "plebForSoldier()": FunctionFragment;
    "rallyTime()": FunctionFragment;
    "regionAllowsAttack(uint8,uint8)": FunctionFragment;
    "regionIds(uint256)": FunctionFragment;
    "regionTiers(uint256)": FunctionFragment;
    "regions(uint8)": FunctionFragment;
    "regionsPerFaction(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveSiege(uint8)": FunctionFragment;
    "setOverwhelming(uint8)": FunctionFragment;
    "setRallyTime(uint256)": FunctionFragment;
    "setRegionTiers(tuple[5])": FunctionFragment;
    "setSiegeCooldown(uint256)": FunctionFragment;
    "setSiegeTime(uint256)": FunctionFragment;
    "setTicketPrice(uint256)": FunctionFragment;
    "siegeCooldown()": FunctionFragment;
    "siegeOutcome(uint8)": FunctionFragment;
    "siegeTime()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attack",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimPleb",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployGarrison",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWorker",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factionAlive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNeighbor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNeighbor2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "movementAllowed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overwhelming",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "player", values: [string]): string;
  encodeFunctionData(functionFragment: "pleb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plebForSoldier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rallyTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "regionAllowsAttack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regionIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regionTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regionsPerFaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveSiege",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOverwhelming",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRallyTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegionTiers",
    values: [
      [
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        }
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSiegeCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSiegeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "siegeCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "siegeOutcome",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "siegeTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPleb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGarrison",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factionAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNeighbor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNeighbor2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "movementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overwhelming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pleb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "plebForSoldier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rallyTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regionAllowsAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "regionIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regionTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "regions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regionsPerFaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveSiege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOverwhelming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRallyTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegionTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSiegeCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSiegeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "siegeCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "siegeOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "siegeTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Attacked(address,uint8,uint8,uint256)": EventFragment;
    "ClaimedPleb(address,uint256)": EventFragment;
    "DeployedGarrison(address,uint8,uint256)": EventFragment;
    "DeployedWorker(address,uint8,uint256)": EventFragment;
    "FactionLost(uint8)": EventFragment;
    "JoinedGame(address,uint8)": EventFragment;
    "OverwhelmingChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RallyTimeChanged(uint256,uint256)": EventFragment;
    "RegionTierIncreased(uint8,uint8)": EventFragment;
    "ResolvedSiege(uint8,uint8,uint256,uint8,uint256,bool)": EventFragment;
    "SiegeCooldownChanged(uint256,uint256)": EventFragment;
    "SiegeTimeChanged(uint256,uint256)": EventFragment;
    "TicketPriceChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attacked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedPleb"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployedGarrison"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployedWorker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactionLost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinedGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OverwhelmingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RallyTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegionTierIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolvedSiege"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SiegeCooldownChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SiegeTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketPriceChanged"): EventFragment;
}

export type AttackedEvent = TypedEvent<
  [string, number, number, BigNumber] & {
    player: string;
    faction: number;
    region: number;
    soldier: BigNumber;
  }
>;

export type ClaimedPlebEvent = TypedEvent<
  [string, BigNumber] & { player: string; pleb: BigNumber }
>;

export type DeployedGarrisonEvent = TypedEvent<
  [string, number, BigNumber] & {
    player: string;
    region: number;
    soldier: BigNumber;
  }
>;

export type DeployedWorkerEvent = TypedEvent<
  [string, number, BigNumber] & {
    player: string;
    region: number;
    worker: BigNumber;
  }
>;

export type FactionLostEvent = TypedEvent<[number] & { faction: number }>;

export type JoinedGameEvent = TypedEvent<
  [string, number] & { player: string; faction: number }
>;

export type OverwhelmingChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldValue: BigNumber; newValue: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RallyTimeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldTime: BigNumber; newTime: BigNumber }
>;

export type RegionTierIncreasedEvent = TypedEvent<
  [number, number] & { region: number; tier: number }
>;

export type ResolvedSiegeEvent = TypedEvent<
  [number, number, BigNumber, number, BigNumber, boolean] & {
    region: number;
    defender: number;
    defendingSoldier: BigNumber;
    attacker: number;
    attackingSoldier: BigNumber;
    defenderWon: boolean;
  }
>;

export type SiegeCooldownChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldCooldown: BigNumber; newCooldown: BigNumber }
>;

export type SiegeTimeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldTime: BigNumber; newTime: BigNumber }
>;

export type TicketPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldPrice: BigNumber; newPrice: BigNumber }
>;

export class PhantomRisk extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PhantomRiskInterface;

  functions: {
    attack(
      regionTo: BigNumberish,
      regionFrom: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPleb(
      _region: BigNumberish,
      _frontendFee: BigNumberish,
      _frontendProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployGarrison(
      regionTo: BigNumberish,
      neighborRegion: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployWorker(
      regionTo: BigNumberish,
      workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factionAlive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNeighbor(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNeighbor2(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    movementAllowed(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    overwhelming(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    player(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    pleb(overrides?: CallOverrides): Promise<[string]>;

    plebForSoldier(overrides?: CallOverrides): Promise<[BigNumber]>;

    rallyTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    regionAllowsAttack(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    regionIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    regionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        workerLimit: BigNumber;
        requiredGarrison: BigNumber;
        plebPerHour: BigNumber;
      }
    >;

    regions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        [number, BigNumber, BigNumber] & {
          attacker: number;
          attackedAt: BigNumber;
          soldier: BigNumber;
        }
      ] & {
        id: number;
        x: number;
        y: number;
        tier: number;
        garrison: BigNumber;
        totalWorker: BigNumber;
        controlledBy: number;
        besieged: boolean;
        cantGetAttackedTill: BigNumber;
        siege: [number, BigNumber, BigNumber] & {
          attacker: number;
          attackedAt: BigNumber;
          soldier: BigNumber;
        };
      }
    >;

    regionsPerFaction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveSiege(
      _region: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOverwhelming(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRallyTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegionTiers(
      tiers: [
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        }
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSiegeCooldown(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSiegeTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    siegeCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    siegeOutcome(
      _region: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, BigNumber]>;

    siegeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attack(
    regionTo: BigNumberish,
    regionFrom: BigNumberish,
    soldierAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPleb(
    _region: BigNumberish,
    _frontendFee: BigNumberish,
    _frontendProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  deployGarrison(
    regionTo: BigNumberish,
    neighborRegion: BigNumberish,
    soldierAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployWorker(
    regionTo: BigNumberish,
    workerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factionAlive(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isNeighbor(
    _regionTo: BigNumberish,
    _regionFrom: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNeighbor2(
    _regionTo: BigNumberish,
    _regionFrom: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinGame(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  movementAllowed(
    _regionTo: BigNumberish,
    _regionFrom: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  overwhelming(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  player(arg0: string, overrides?: CallOverrides): Promise<number>;

  pleb(overrides?: CallOverrides): Promise<string>;

  plebForSoldier(overrides?: CallOverrides): Promise<BigNumber>;

  rallyTime(overrides?: CallOverrides): Promise<BigNumber>;

  regionAllowsAttack(
    _regionTo: BigNumberish,
    _regionFrom: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  regionIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  regionTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      workerLimit: BigNumber;
      requiredGarrison: BigNumber;
      plebPerHour: BigNumber;
    }
  >;

  regions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      [number, BigNumber, BigNumber] & {
        attacker: number;
        attackedAt: BigNumber;
        soldier: BigNumber;
      }
    ] & {
      id: number;
      x: number;
      y: number;
      tier: number;
      garrison: BigNumber;
      totalWorker: BigNumber;
      controlledBy: number;
      besieged: boolean;
      cantGetAttackedTill: BigNumber;
      siege: [number, BigNumber, BigNumber] & {
        attacker: number;
        attackedAt: BigNumber;
        soldier: BigNumber;
      };
    }
  >;

  regionsPerFaction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveSiege(
    _region: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOverwhelming(
    number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRallyTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegionTiers(
    tiers: [
      {
        workerLimit: BigNumberish;
        requiredGarrison: BigNumberish;
        plebPerHour: BigNumberish;
      },
      {
        workerLimit: BigNumberish;
        requiredGarrison: BigNumberish;
        plebPerHour: BigNumberish;
      },
      {
        workerLimit: BigNumberish;
        requiredGarrison: BigNumberish;
        plebPerHour: BigNumberish;
      },
      {
        workerLimit: BigNumberish;
        requiredGarrison: BigNumberish;
        plebPerHour: BigNumberish;
      },
      {
        workerLimit: BigNumberish;
        requiredGarrison: BigNumberish;
        plebPerHour: BigNumberish;
      }
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSiegeCooldown(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSiegeTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTicketPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  siegeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  siegeOutcome(
    _region: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, BigNumber]>;

  siegeTime(overrides?: CallOverrides): Promise<BigNumber>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attack(
      regionTo: BigNumberish,
      regionFrom: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    claimPleb(
      _region: BigNumberish,
      _frontendFee: BigNumberish,
      _frontendProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployGarrison(
      regionTo: BigNumberish,
      neighborRegion: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployWorker(
      regionTo: BigNumberish,
      workerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factionAlive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNeighbor(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNeighbor2(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinGame(overrides?: CallOverrides): Promise<void>;

    movementAllowed(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    overwhelming(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    player(arg0: string, overrides?: CallOverrides): Promise<number>;

    pleb(overrides?: CallOverrides): Promise<string>;

    plebForSoldier(overrides?: CallOverrides): Promise<BigNumber>;

    rallyTime(overrides?: CallOverrides): Promise<BigNumber>;

    regionAllowsAttack(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    regionIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    regionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        workerLimit: BigNumber;
        requiredGarrison: BigNumber;
        plebPerHour: BigNumber;
      }
    >;

    regions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        [number, BigNumber, BigNumber] & {
          attacker: number;
          attackedAt: BigNumber;
          soldier: BigNumber;
        }
      ] & {
        id: number;
        x: number;
        y: number;
        tier: number;
        garrison: BigNumber;
        totalWorker: BigNumber;
        controlledBy: number;
        besieged: boolean;
        cantGetAttackedTill: BigNumber;
        siege: [number, BigNumber, BigNumber] & {
          attacker: number;
          attackedAt: BigNumber;
          soldier: BigNumber;
        };
      }
    >;

    regionsPerFaction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveSiege(
      _region: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOverwhelming(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRallyTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRegionTiers(
      tiers: [
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        }
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setSiegeCooldown(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSiegeTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTicketPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    siegeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    siegeOutcome(
      _region: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, BigNumber]>;

    siegeTime(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Attacked(address,uint8,uint8,uint256)"(
      player?: null,
      faction?: null,
      region?: null,
      soldier?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      { player: string; faction: number; region: number; soldier: BigNumber }
    >;

    Attacked(
      player?: null,
      faction?: null,
      region?: null,
      soldier?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      { player: string; faction: number; region: number; soldier: BigNumber }
    >;

    "ClaimedPleb(address,uint256)"(
      player?: null,
      pleb?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; pleb: BigNumber }
    >;

    ClaimedPleb(
      player?: null,
      pleb?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; pleb: BigNumber }
    >;

    "DeployedGarrison(address,uint8,uint256)"(
      player?: null,
      region?: null,
      soldier?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { player: string; region: number; soldier: BigNumber }
    >;

    DeployedGarrison(
      player?: null,
      region?: null,
      soldier?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { player: string; region: number; soldier: BigNumber }
    >;

    "DeployedWorker(address,uint8,uint256)"(
      player?: null,
      region?: null,
      worker?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { player: string; region: number; worker: BigNumber }
    >;

    DeployedWorker(
      player?: null,
      region?: null,
      worker?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { player: string; region: number; worker: BigNumber }
    >;

    "FactionLost(uint8)"(
      faction?: null
    ): TypedEventFilter<[number], { faction: number }>;

    FactionLost(
      faction?: null
    ): TypedEventFilter<[number], { faction: number }>;

    "JoinedGame(address,uint8)"(
      player?: null,
      faction?: null
    ): TypedEventFilter<[string, number], { player: string; faction: number }>;

    JoinedGame(
      player?: null,
      faction?: null
    ): TypedEventFilter<[string, number], { player: string; faction: number }>;

    "OverwhelmingChanged(uint256,uint256)"(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldValue: BigNumber; newValue: BigNumber }
    >;

    OverwhelmingChanged(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldValue: BigNumber; newValue: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RallyTimeChanged(uint256,uint256)"(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;

    RallyTimeChanged(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;

    "RegionTierIncreased(uint8,uint8)"(
      region?: null,
      tier?: null
    ): TypedEventFilter<[number, number], { region: number; tier: number }>;

    RegionTierIncreased(
      region?: null,
      tier?: null
    ): TypedEventFilter<[number, number], { region: number; tier: number }>;

    "ResolvedSiege(uint8,uint8,uint256,uint8,uint256,bool)"(
      region?: null,
      defender?: null,
      defendingSoldier?: null,
      attacker?: null,
      attackingSoldier?: null,
      defenderWon?: null
    ): TypedEventFilter<
      [number, number, BigNumber, number, BigNumber, boolean],
      {
        region: number;
        defender: number;
        defendingSoldier: BigNumber;
        attacker: number;
        attackingSoldier: BigNumber;
        defenderWon: boolean;
      }
    >;

    ResolvedSiege(
      region?: null,
      defender?: null,
      defendingSoldier?: null,
      attacker?: null,
      attackingSoldier?: null,
      defenderWon?: null
    ): TypedEventFilter<
      [number, number, BigNumber, number, BigNumber, boolean],
      {
        region: number;
        defender: number;
        defendingSoldier: BigNumber;
        attacker: number;
        attackingSoldier: BigNumber;
        defenderWon: boolean;
      }
    >;

    "SiegeCooldownChanged(uint256,uint256)"(
      oldCooldown?: null,
      newCooldown?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCooldown: BigNumber; newCooldown: BigNumber }
    >;

    SiegeCooldownChanged(
      oldCooldown?: null,
      newCooldown?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldCooldown: BigNumber; newCooldown: BigNumber }
    >;

    "SiegeTimeChanged(uint256,uint256)"(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;

    SiegeTimeChanged(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;

    "TicketPriceChanged(uint256,uint256)"(
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldPrice: BigNumber; newPrice: BigNumber }
    >;

    TicketPriceChanged(
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldPrice: BigNumber; newPrice: BigNumber }
    >;
  };

  estimateGas: {
    attack(
      regionTo: BigNumberish,
      regionFrom: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPleb(
      _region: BigNumberish,
      _frontendFee: BigNumberish,
      _frontendProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployGarrison(
      regionTo: BigNumberish,
      neighborRegion: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployWorker(
      regionTo: BigNumberish,
      workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factionAlive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNeighbor(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNeighbor2(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    movementAllowed(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overwhelming(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    player(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pleb(overrides?: CallOverrides): Promise<BigNumber>;

    plebForSoldier(overrides?: CallOverrides): Promise<BigNumber>;

    rallyTime(overrides?: CallOverrides): Promise<BigNumber>;

    regionAllowsAttack(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    regionsPerFaction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveSiege(
      _region: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOverwhelming(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRallyTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegionTiers(
      tiers: [
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        }
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSiegeCooldown(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSiegeTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    siegeCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    siegeOutcome(
      _region: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    siegeTime(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      regionTo: BigNumberish,
      regionFrom: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPleb(
      _region: BigNumberish,
      _frontendFee: BigNumberish,
      _frontendProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployGarrison(
      regionTo: BigNumberish,
      neighborRegion: BigNumberish,
      soldierAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployWorker(
      regionTo: BigNumberish,
      workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factionAlive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNeighbor(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNeighbor2(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    movementAllowed(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overwhelming(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pleb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plebForSoldier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rallyTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regionAllowsAttack(
      _regionTo: BigNumberish,
      _regionFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regionsPerFaction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveSiege(
      _region: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOverwhelming(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRallyTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegionTiers(
      tiers: [
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        },
        {
          workerLimit: BigNumberish;
          requiredGarrison: BigNumberish;
          plebPerHour: BigNumberish;
        }
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSiegeCooldown(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSiegeTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTicketPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    siegeCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    siegeOutcome(
      _region: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    siegeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
